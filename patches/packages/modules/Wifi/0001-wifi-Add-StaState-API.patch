From 52927af4914db3abc943561da6e72d05ccb5675e Mon Sep 17 00:00:00 2001
From: Kshitij Gupta <kshitijgm@gmail.com>
Date: Tue, 27 Apr 2021 06:16:41 +0200
Subject: [PATCH 1/4] wifi: Add StaState API

Change-Id: I1bcb25053a907c2818432105bc5a19faed0be4b9
---
 .../android/net/wifi/BaseWifiService.java     | 12 ++++
 .../android/server/wifi/ActiveModeWarden.java |  3 +
 .../com/android/server/wifi/WifiInjector.java |  7 ++
 .../android/server/wifi/WifiServiceImpl.java  | 28 ++++++++
 .../server/wifi/WifiStaStateNotifier.java     | 72 +++++++++++++++++++
 5 files changed, 122 insertions(+)
 create mode 100644 service/java/com/android/server/wifi/WifiStaStateNotifier.java

diff --git a/framework/java/android/net/wifi/BaseWifiService.java b/framework/java/android/net/wifi/BaseWifiService.java
index ac565ae608..99806e4677 100644
--- a/framework/java/android/net/wifi/BaseWifiService.java
+++ b/framework/java/android/net/wifi/BaseWifiService.java
@@ -21,6 +21,7 @@ import android.annotation.Nullable;
 import android.net.DhcpInfo;
 import android.net.DhcpOption;
 import android.net.Network;
+import android.net.wifi.IStaStateCallback;
 import android.net.wifi.hotspot2.IProvisioningCallback;
 import android.net.wifi.hotspot2.OsuProvider;
 import android.net.wifi.hotspot2.PasspointConfiguration;
@@ -920,4 +921,15 @@ public class BaseWifiService extends IWifiManager.Stub {
             boolean requireNewInterface, IInterfaceCreationInfoCallback callback) {
         throw new UnsupportedOperationException();
     }
+
+    @Override
+    public void registerStaStateCallback(
+            IBinder binder, IStaStateCallback callback, int callbackIdentifier) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void unregisterStaStateCallback(int callbackIdentifier) {
+        throw new UnsupportedOperationException();
+    }
 }
diff --git a/service/java/com/android/server/wifi/ActiveModeWarden.java b/service/java/com/android/server/wifi/ActiveModeWarden.java
index cc6550b161..3cb632ddab 100644
--- a/service/java/com/android/server/wifi/ActiveModeWarden.java
+++ b/service/java/com/android/server/wifi/ActiveModeWarden.java
@@ -2326,4 +2326,7 @@ public class ActiveModeWarden {
         return Objects.equals(ssid, connectedOrConnectingSsid)
                 && Objects.equals(bssid, connectedOrConnectingBssid);
     }
+
+    public void registerStaEventCallback() {}
+    public void unregisterStaEventCallback() {}
 }
diff --git a/service/java/com/android/server/wifi/WifiInjector.java b/service/java/com/android/server/wifi/WifiInjector.java
index d62d8904c3..7cfac3eec1 100644
--- a/service/java/com/android/server/wifi/WifiInjector.java
+++ b/service/java/com/android/server/wifi/WifiInjector.java
@@ -161,6 +161,7 @@ public class WifiInjector {
     private final WifiVendorHal mWifiVendorHal;
     private final ScoringParams mScoringParams;
     private final ActiveModeWarden mActiveModeWarden;
+    private final WifiStaStateNotifier mWifiStaStateNotifier;
     private final WifiSettingsStore mSettingsStore;
     private final OpenNetworkNotifier mOpenNetworkNotifier;
     private final WifiLockManager mLockManager;
@@ -531,6 +532,8 @@ public class WifiInjector {
         mWifiNetworkSelector.registerNetworkNominator(mSavedNetworkNominator);
         mWifiNetworkSelector.registerNetworkNominator(mNetworkSuggestionNominator);
 
+        mWifiStaStateNotifier = new WifiStaStateNotifier(wifiLooper, this);
+
         mSimRequiredNotifier = new SimRequiredNotifier(mContext, mFrameworkFacade,
                 mWifiNotificationManager);
         mLastCallerInfoManager = new LastCallerInfoManager();
@@ -655,6 +658,10 @@ public class WifiInjector {
         return mActiveModeWarden;
     }
 
+    public WifiStaStateNotifier getWifiStaStateNotifier() {
+        return mWifiStaStateNotifier;
+    }
+
     public WifiSettingsStore getWifiSettingsStore() {
         return mSettingsStore;
     }
diff --git a/service/java/com/android/server/wifi/WifiServiceImpl.java b/service/java/com/android/server/wifi/WifiServiceImpl.java
index 4101d14949..b0581dfdb3 100644
--- a/service/java/com/android/server/wifi/WifiServiceImpl.java
+++ b/service/java/com/android/server/wifi/WifiServiceImpl.java
@@ -97,6 +97,7 @@ import android.net.wifi.IScanResultsCallback;
 import android.net.wifi.ISoftApCallback;
 import android.net.wifi.ISubsystemRestartCallback;
 import android.net.wifi.ISuggestionConnectionStatusListener;
+import android.net.wifi.IStaStateCallback;
 import android.net.wifi.ISuggestionUserApprovalStatusListener;
 import android.net.wifi.ITrafficStateCallback;
 import android.net.wifi.IWifiConnectedNetworkScorer;
@@ -248,6 +249,7 @@ public class WifiServiceImpl extends BaseWifiService {
     private final WifiBlocklistMonitor mWifiBlocklistMonitor;
     private final PasspointManager mPasspointManager;
     private final WifiLog mLog;
+    private WifiStaStateNotifier mWifiStaStateNotifier;
     private final WifiConnectivityManager mWifiConnectivityManager;
     private final ConnectHelper mConnectHelper;
     private final WifiGlobals mWifiGlobals;
@@ -502,6 +504,7 @@ public class WifiServiceImpl extends BaseWifiService {
         mWifiDialogManager = mWifiInjector.getWifiDialogManager();
         mBuildProperties = mWifiInjector.getBuildProperties();
         mDefaultClientModeManager = mWifiInjector.getDefaultClientModeManager();
+        mWifiStaStateNotifier = mWifiInjector.getWifiStaStateNotifier();
         mCountryCodeTracker = new CountryCodeTracker();
         mWifiTetheringDisallowed = false;
         mMultiInternetManager = mWifiInjector.getMultiInternetManager();
@@ -5300,6 +5303,31 @@ public class WifiServiceImpl extends BaseWifiService {
         mWifiThreadRunner.post(() -> mWifiTrafficPoller.removeCallback(callback));
     }
 
+    @Override
+    public void registerStaStateCallback(IBinder binder, IStaStateCallback callback,
+                                                int callbackIdentifier) {
+        if (binder == null) {
+            throw new IllegalArgumentException("Binder must not be null");
+        }
+        if (callback == null) {
+            throw new IllegalArgumentException("Callback must not be null");
+        }
+        if (mVerboseLoggingEnabled) {
+            mLog.info("registerStaStateCallback uid=%").c(Binder.getCallingUid()).flush();
+        }
+        mWifiThreadRunner.post(() ->
+            mWifiStaStateNotifier.addCallback(binder, callback, callbackIdentifier));
+    }
+
+    @Override
+    public void unregisterStaStateCallback(int callbackIdentifier) {
+        if (mVerboseLoggingEnabled) {
+            mLog.info("unregisterStaStateCallback uid=%").c(Binder.getCallingUid()).flush();
+        }
+        mWifiThreadRunner.post(() ->
+            mWifiStaStateNotifier.removeCallback(callbackIdentifier));
+    }
+
     private long getSupportedFeaturesInternal() {
         long supportedFeatureSet = mWifiThreadRunner.call(
                 () -> mWifiNative.getSupportedFeatureSet(
diff --git a/service/java/com/android/server/wifi/WifiStaStateNotifier.java b/service/java/com/android/server/wifi/WifiStaStateNotifier.java
new file mode 100644
index 0000000000..14154fd95c
--- /dev/null
+++ b/service/java/com/android/server/wifi/WifiStaStateNotifier.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright (C) 2020 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.wifi;
+
+import android.annotation.NonNull;
+import android.net.wifi.IStaStateCallback;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Looper;
+import android.os.RemoteException;
+import android.util.Log;
+
+import com.android.server.wifi.util.ExternalCallbackTracker;
+
+
+public class WifiStaStateNotifier {
+    private final ExternalCallbackTracker<IStaStateCallback> mRegisteredCallbacks;
+    private static WifiInjector mWifiInjector;
+    private static final String TAG = "WifiStaStateNotifier";
+    private static final boolean DEBUG = false;
+
+    WifiStaStateNotifier(@NonNull Looper looper, WifiInjector wifiInjector) {
+        mRegisteredCallbacks = new ExternalCallbackTracker<IStaStateCallback>(new Handler(looper));
+        mWifiInjector = wifiInjector;
+    }
+
+    public void addCallback(IBinder binder, IStaStateCallback callback,
+                            int callbackIdentifier) {
+        if (DEBUG) Log.d(TAG, "addCallback");
+        if (mRegisteredCallbacks.getNumCallbacks() > 0) {
+            if (DEBUG) Log.e(TAG, "Failed to add callback, only support single request!");
+            return;
+        }
+        if (!mRegisteredCallbacks.add(binder, callback, callbackIdentifier)) {
+            if (DEBUG) Log.e(TAG, "Failed to add callback");
+            return;
+        }
+        mWifiInjector.getActiveModeWarden().registerStaEventCallback();
+    }
+
+    public void removeCallback(int callbackIdentifier) {
+        if (DEBUG) Log.d(TAG, "removeCallback");
+        mRegisteredCallbacks.remove(callbackIdentifier);
+        mWifiInjector.getActiveModeWarden().unregisterStaEventCallback();
+    }
+
+    public void onStaToBeOff() {
+        if (DEBUG) Log.d(TAG, "onStaToBeOff");
+        for (IStaStateCallback callback : mRegisteredCallbacks.getCallbacks()) {
+            try {
+                if (DEBUG) Log.d(TAG, "callback onStaToBeOff");
+                callback.onStaToBeOff();
+            } catch (RemoteException e) {
+                // do nothing
+            }
+        }
+    }
+}
\ No newline at end of file
-- 
2.39.1

